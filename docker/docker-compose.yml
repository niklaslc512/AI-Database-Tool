version: '3.8'

services:
  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: ai-database-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=/app/data/ai-database.db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGIN=http://localhost
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - ai-database-network
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3001/health', (res) => { res.statusCode === 200 ? process.exit(0) : process.exit(1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: ai-database-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ai-database-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: ai-database-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - ai-database-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ai-database-network:
    driver: bridge

volumes:
  redis_data:
    driver: local